1. 项目目录结构: 

    public 存放了html页面和对应的css和js文件(静态资源文件)
    server 存放了node代码(启动服务器的代码和操作数据库的代码)
        app.js 存放了启动服务器的代码 
        db 中存放了操作数据库的代码 
        router 存放了对应路由
            logicRouters中存放了登录和注册的业务逻辑的路由
            uiRouter 存放了配合ejs实现后端渲染的路由
    views 存放了ejs模板

2. 代码执行过程:

    2.1 在命令行工具中 执行了nodemon app.js 
    2.2 引入express 
    2.3 引入对应路由器对象, 当引入路由器对象的时候,代码会进入到logicRouters.js中执行, 当这里的代码执行完毕,进入uiRouter.js中执行
    2.4. 就得到了一个路由器对象,分别配置了登录和注册的逻辑的路由和响应首页的路由 
    2.5 连接数据库(是异步操作,当连接成功之后,才执行后面的代码)
    2.6 创建应用对象
    2.7 配置响应静态资源的中间件(因为需要给服务器发送请求,通过这种形式去获取登录和注册页面)
    2.8 配置了处理post请求上传数据的中间件(执行登录和注册的业务逻辑时,需要获取用户上传的数据)
    2.9 需要让之前配置的登录和注册以及后端渲染首页的路由生效. 所以将路由对象,应用一下
    2.10 配置当前项目中使用的模板引擎是谁
    2.11 配置模板引擎所处的目录(告诉express,我们定义的ejs模板所处的位置)
    2.12 启动服务器


3. 浏览器和服务器以及数据库的交互:

  3.1 在浏览器地址栏中输入 http://127.0.0.1:5000/register/index.html ,服务器中发现请求的是静态页面, 直接在app.use(express.static())这里就处理了,响应注册页面 
  3.2 在浏览器中对应的注册表单里面,输入注册信息,表单校验通过之后, 点击注册按钮 
  3.3 由于注册表单的action属性的值是http://127.0.0.1:5000/register,并且请求方式是post .所以浏览器按照这个地址和请求方式给服务器发送请求 
  3.4 服务器在logicRouters.js中配置的router.post('/register')的这个路由可以和这个请求匹配.所以对应的回调函数被调用. 这回调中代码会执行,里面调用了往数据库中添加一条数据的代码. 当数据添加成功之后,就响应给浏览器,告诉浏览器注册成功,并且页面上有一个a标签,可以跳转到登录页面 
  3.5 点击a标签,跳转到登录页面. 由于a标签的href地址是http://127.0.0.1:5000/login/index.html. 所以点击a标签,会让浏览器将这个a标签的href地址添加到地址栏中,然后自动按下回车键,那么浏览器又给服务器发送请求. 请求的还是一个静态资源.所以express.static()处理了这个请求,响应登录页面给浏览器 

  3.6 在登录页面中输入用户名和密码,等过表单校验之后, 由于登录页面的form表单的action 写的地址是http://127.0.0.1:5000/login ,请求方式是post.所以这个请求被logicRoutes.js中 router.post('/login')这个路由处理了,这里面就是去数据库查询数据,如果查询到了,就执行 res.redirect('http://127.0.0.1:5000/home')这段代码

  3.7 执行.res.redirect,服务器就响应浏览器了,让浏览器重定向

  3.8 浏览器接收到重定向的响应,就按照重定向的地址,再次给服务器发送请求, 请求的地址: http://127.0.0.1:5000/home. 这个请求实际上是从地址栏中发出去的,所以是get请求 

  3.9 服务器中uiRouter.js中router.get('/home')
这个路由和刚才请求的地址是一一对应的.所以里面的回调函数会执行 .执行了res.render('index', { username: 'zs' })

  3.10 res.render('index', { username: 'zs' })代码一执行, 那么express首先先根据之前配置的app.set('views', '../views/home')的代码,去views/home下面去找index.ejs文件, 找到之后,将res.render的第二个参数当做数据,然后进入到index.ejs中,按照ejs的语法,对文件中的代码进行解析 

  3.11 解析时,如果是<%%>外面的代码,写的时候,解析之后还是什么样. 当遇到<%%>的时候,里面的代码就当做js去执行. 我们的代码是<%= username%>的. ejs在解析时,会先从res.render的第二个参数传入的对象里面去找username这个属性,找到了就把这个属性对应的值拿到,由于<%= zs%>这里有一个=,所以ejs会将这个拿到的zs,渲染到<%= username%>所在的位置上

  3.12 解析完毕之后,就直接将解析后的结果,直接响应给浏览器 

  3.13 响应给浏览器的内容如下: 
  <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Document</title>
    </head>
    <body>
        <h1>首页</h1>
        <h3 id="h3">欢迎您: zs</h3>
    </body>
    </html>

    3.14 浏览器接收到这个内容,直接渲染



