模块化: 
    要解决两个问题: 
        1. 每一个模块(js)要形成自己的作用域,防止全局变量污染
        2. 模块和模块之间的依赖关系(使用哪个模块就引用哪个模块)

模块化规范: 就是针对上面的两个问题,提出的解决方案(仅仅就是方案,没有具体的实现)

    规范有哪些?
        Commonjs  被node实现了，可以在node中直接使用
        AMD   被require.js实现了  （依赖前置： 要使用的模块提前加载）
        CMD   被sea.js实现了  （依赖就近：要使用的模块，使用的时候才加载）
        ES6   浏览器暂时不支持。需要只用babel先将es6模块化的代码转成common.js. 然后再使用browserify将common.js转成浏览器认识的代码

ES6模块化规范对于导入和导出的规定: 

    导出: 
        分别导出
            1. 一个模块中可以使用多次分别导出
            2. 语法: export 要导出的内容
            3. 导出的内容不能是变量,字面量. 应该是声明的语句
        统一导出
            1. 一个模块中可以使用多次统一导出(但是一般就在最下面写一次)
            2. 语法: export {要导出的内容} 
            3. 导出的内容应该是变量/常量. 
        默认导出
            1. 一个模块中只能使用一次默认导出
            2. 语法: export default 要导出的内容
            3. 导出的内容可以是字面量/变量/常量
    导入: 
        1. 如果是分别/统一导出 
            import {} from '模块名/路径'
            注意: {}中的变量名要和引入的模块中的名字保持一致

        2. 如果是默认导出
            import 自定义名字 from '模块名/路径'
        
        3. 如果一个模块中使用了多种导出方式,导入时
          import 默认导出的名字, {} from '模块名/路径'

        4. 如果要给导出的变量重命名
          import {原来的名字 as 新的名字} from '模块名/路径'

        5. 如果是自定义的模块,写路径,如果是第三方的模块写模块名